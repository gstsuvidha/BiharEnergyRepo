// <auto-generated />
using BiharEnergy.Core.Enums;
using BiharEnergy.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BiharEnergy.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180709045715_InitialPrefix")]
    partial class InitialPrefix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BiharEnergy.Core.Domain.Accounting.AccountingUnit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AuthorizedRepresentativeName");

                    b.Property<string>("BankAccountName");

                    b.Property<string>("BankAccountNumber");

                    b.Property<string>("BusinessName");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Contact");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CurrentGrossTurnOver");

                    b.Property<string>("Email");

                    b.Property<string>("Gstin");

                    b.Property<string>("GstinPassword");

                    b.Property<string>("IfscCode");

                    b.Property<string>("ImgUrl");

                    b.Property<bool>("InventorySelection");

                    b.Property<string>("InvoicePrefix");

                    b.Property<string>("LastGrossTurnOver");

                    b.Property<string>("Name");

                    b.Property<string>("PlaceOfSupply");

                    b.Property<string>("RegistrationType");

                    b.Property<int>("SelectedYear");

                    b.Property<string>("Subject");

                    b.Property<string>("TermsAndCondition");

                    b.Property<string>("TurnOver");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccountingUnits");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AccountModule.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountingUnitId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Nature");

                    b.Property<double>("OpeningBalance");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdjustCustomerAmountModule.AdjustCustomerAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<double>("Amount");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ModeOfPayment");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AdjustCustomerAmount");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdjustSupplierAmountModule.AdjustSupplierAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ModeOfPayment");

                    b.Property<int>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("SupplierId");

                    b.ToTable("AdjustSupplierAmount");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancedReceivedModule.AdvanceReceived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<string>("BillingAddress");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date");

                    b.Property<int>("InvoiceCategory");

                    b.Property<bool>("IsPlaceOfSupplyDifferent");

                    b.Property<string>("ModeOfPayment");

                    b.Property<string>("PlaceOfSupply");

                    b.Property<int>("ReceiptNumber");

                    b.Property<string>("Reference");

                    b.Property<int>("SupplyType");

                    b.Property<double>("TotalAdvanceReceive");

                    b.Property<double>("TotalCessAmount");

                    b.Property<double>("TotalTaxAmount");

                    b.Property<double>("TotalTaxableValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceiptNumber", "AccountingUnitId")
                        .IsUnique()
                        .HasFilter("[AccountingUnitId] IS NOT NULL");

                    b.ToTable("AdvanceReceiveds");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancedReceivedModule.AdvanceReceivedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AdvanceAmount");

                    b.Property<int>("AdvanceReceivedId");

                    b.Property<double>("CessAmount");

                    b.Property<double>("CgstAmount");

                    b.Property<double>("IgstAmount");

                    b.Property<int>("ProductId");

                    b.Property<double>("SgstAmount");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxableValue");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceReceivedId");

                    b.HasIndex("ProductId");

                    b.ToTable("AdvanceReceivedItems");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancePaidModule.AdvancePaid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ModeOfPayment");

                    b.Property<string>("PlaceOfSupply");

                    b.Property<string>("ReceiptNumber");

                    b.Property<string>("ShippingAddress");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("SupplyType");

                    b.Property<double>("TotalAdvancePaid");

                    b.Property<double>("TotalCessAmount");

                    b.Property<double>("TotalTaxAmount");

                    b.Property<double>("TotalTaxableValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("SupplierId");

                    b.ToTable("AdvancePaids");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancePaidModule.AdvancePaidItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AdvanceAmount");

                    b.Property<int>("AdvancePaidId");

                    b.Property<double>("CessAmount");

                    b.Property<double>("CgstAmount");

                    b.Property<double>("Discount");

                    b.Property<double>("IgstAmount");

                    b.Property<string>("ItcEligibility");

                    b.Property<double>("ItcPercentage");

                    b.Property<int>("ProductId");

                    b.Property<double>("Quantity");

                    b.Property<double>("SgstAmount");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxableValue");

                    b.Property<double>("Total");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("AdvancePaidId");

                    b.HasIndex("ProductId");

                    b.ToTable("AdvancePaidItems");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.CompanyModule.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.CustomerModule.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingUnitId");

                    b.Property<string>("Address");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Gstin");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("RegistrationType");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ExportInvoiceModule.ExportInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingUnitId");

                    b.Property<double>("ConversionRate");

                    b.Property<string>("CountryOfSupply");

                    b.Property<double>("Currency");

                    b.Property<string>("CustomerBilledAddress");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ExportType");

                    b.Property<string>("GstPayment");

                    b.Property<int>("InvoiceNumber");

                    b.Property<string>("PortCode");

                    b.Property<string>("ShippingAddress");

                    b.Property<int>("ShippingBillNumber");

                    b.Property<DateTime>("ShippingDate");

                    b.Property<int>("SupplyType");

                    b.Property<double>("TotalInvoiceValue");

                    b.Property<double>("TotalTaxAmount");

                    b.Property<double>("TotalTaxableValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.ToTable("ExportInvoices");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ExportInvoiceModule.ExportInvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("Cess");

                    b.Property<double>("Discount");

                    b.Property<int>("ExportInvoiceId");

                    b.Property<int>("ProductId");

                    b.Property<double>("Quantity");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxableValue");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ExportInvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ExportInvoiceItems");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.InventoryModule.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingUnitId");

                    b.Property<double>("Damage");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.IssueNoteModule.IssueNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("InvoiceCategory");

                    b.Property<int>("IssueNoteNumber");

                    b.Property<int>("NoteType");

                    b.Property<DateTime>("OriginalInvoiceDate");

                    b.Property<int>("OriginalInvoiceNumber");

                    b.Property<double>("OriginalInvoiceValue");

                    b.Property<int>("OutwardInvoiceType");

                    b.Property<string>("Pgst");

                    b.Property<string>("PlaceOfSupply");

                    b.Property<string>("Reason");

                    b.Property<string>("Refrence");

                    b.Property<int>("SupplyType");

                    b.Property<double>("TotalCessAmount");

                    b.Property<double>("TotalNoteValue");

                    b.Property<double>("TotalTaxAmount");

                    b.Property<double>("TotalTaxableValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IssueNoteNumber", "AccountingUnitId")
                        .IsUnique()
                        .HasFilter("[AccountingUnitId] IS NOT NULL");

                    b.ToTable("IssueNotes");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.IssueNoteModule.IssueNoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CessAmount");

                    b.Property<double>("CgstAmount");

                    b.Property<double>("IgstAmount");

                    b.Property<int>("IssueNoteId");

                    b.Property<int>("ProductId");

                    b.Property<double>("Quantity");

                    b.Property<double>("SgstAmount");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxableValue");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("IssueNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("IssueNoteItems");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ProductModule.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingUnitId");

                    b.Property<double>("Cess");

                    b.Property<string>("Description");

                    b.Property<string>("HsnSacCode");

                    b.Property<double>("Igst");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsReverseChargeApplicable");

                    b.Property<bool>("IsTaxIncluded");

                    b.Property<string>("Name");

                    b.Property<double>("PerReverseCharge");

                    b.Property<int>("ProductType");

                    b.Property<double>("Rate");

                    b.Property<string>("Unit");

                    b.Property<string>("UnitOthers");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.PurchaseInvoiceModule.PurchaseInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<bool>("BilledPassed");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Etin");

                    b.Property<int>("InvoiceCategory");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("InvoiceType");

                    b.Property<bool>("IsRegisteredPurchase");

                    b.Property<bool>("IsReverseChargeApplicable");

                    b.Property<string>("PlaceOfSupply");

                    b.Property<string>("PurchaseInvoiceType");

                    b.Property<string>("Reference");

                    b.Property<string>("ShippingAddress");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("SupplyType");

                    b.Property<double>("TotalCessAmount");

                    b.Property<double>("TotalInvoiceValue");

                    b.Property<double>("TotalTaxAmount");

                    b.Property<double>("TotalTaxableValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.PurchaseInvoiceModule.PurchaseInvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("CessAmount");

                    b.Property<double>("CgstAmount");

                    b.Property<double>("Discount");

                    b.Property<double>("IgstAmount");

                    b.Property<string>("ItcEligibility");

                    b.Property<double>("ItcPercentage");

                    b.Property<int>("ProductId");

                    b.Property<int>("PurchaseInvoiceId");

                    b.Property<double>("Quantity");

                    b.Property<double>("SgstAmount");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxableValue");

                    b.Property<double>("Total");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ReceiptNoteModule.ReceiptNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("InventoryDate");

                    b.Property<int>("InvoiceCategory");

                    b.Property<string>("ModeOfPayment");

                    b.Property<int>("NoteType");

                    b.Property<double>("PaidAmount");

                    b.Property<string>("Pgst");

                    b.Property<string>("PlaceOfSupply");

                    b.Property<DateTime>("PurchaseInvoiceDate");

                    b.Property<string>("PurchaseInvoiceNumber");

                    b.Property<double>("PurchaseInvoiceValue");

                    b.Property<string>("Reason");

                    b.Property<string>("ReceiptNoteNumber");

                    b.Property<string>("Refrence");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("SupplyType");

                    b.Property<double>("TotalCessAmount");

                    b.Property<double>("TotalNoteValue");

                    b.Property<double>("TotalTaxAmount");

                    b.Property<double>("TotalTaxableValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ReceiptNotes");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ReceiptNoteModule.ReceiptNoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CessAmount");

                    b.Property<double>("CgstAmount");

                    b.Property<double>("Discount");

                    b.Property<double>("IgstAmount");

                    b.Property<string>("ItcEligibility");

                    b.Property<double>("ItcPercentage");

                    b.Property<int>("ProductId");

                    b.Property<double>("Quantity");

                    b.Property<int>("ReceiptNoteId");

                    b.Property<double>("SgstAmount");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxableValue");

                    b.Property<double>("Total");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptNoteId");

                    b.ToTable("ReceiptNoteItems");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.SalesInvoiceModule.SalesInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<string>("AccountingUnitId");

                    b.Property<string>("BillingAddress");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Etin");

                    b.Property<double>("Freight");

                    b.Property<double>("Insurance");

                    b.Property<int>("InvoiceCategory");

                    b.Property<int>("InvoiceNumber");

                    b.Property<string>("InvoicePrefix");

                    b.Property<int>("InvoiceType");

                    b.Property<bool>("IsEdited");

                    b.Property<bool>("IsPlaceOfSupplyDifferent");

                    b.Property<bool>("IsRegisteredSales");

                    b.Property<bool>("IsReverseChargeApplicable");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int>("NoOfTimesEdited");

                    b.Property<double>("PackingFwdChrg");

                    b.Property<string>("PlaceOfSupply");

                    b.Property<string>("Reference");

                    b.Property<string>("ShippingAddress");

                    b.Property<int>("SupplyType");

                    b.Property<double>("TotalCessAmount");

                    b.Property<double>("TotalInvoiceValue");

                    b.Property<double>("TotalTaxAmount");

                    b.Property<double>("TotalTaxableValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceNumber", "AccountingUnitId")
                        .IsUnique()
                        .HasFilter("[AccountingUnitId] IS NOT NULL");

                    b.ToTable("SalesInvoices");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.SalesInvoiceModule.SalesInvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("Cess");

                    b.Property<double>("CgstAmount");

                    b.Property<double>("Discount");

                    b.Property<double>("IgstAmount");

                    b.Property<int>("ProductId");

                    b.Property<double>("Quantity");

                    b.Property<int>("SalesInvoiceId");

                    b.Property<double>("SgstAmount");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxableValue");

                    b.Property<double>("Total");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesInvoiceId");

                    b.ToTable("SalesInvoiceItems");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.SalesInvoiceModule.SalesInvoiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingUnitId");

                    b.Property<int>("InvoiceNumber");

                    b.Property<double>("TotalInvoiceValue");

                    b.HasKey("Id");

                    b.ToTable("SalesInvoiceLogs");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.SupplierModule.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingUnitId");

                    b.Property<string>("Address");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Gstin");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("RegistrationType");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.Accounting.AccountingUnit", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.CompanyModule.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AccountModule.Account", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdjustCustomerAmountModule.AdjustCustomerAmount", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account", "Account")
                        .WithMany("AdjustCustomerAmounts")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.CustomerModule.Customer", "Customer")
                        .WithMany("AdjustCustomerAmount")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdjustSupplierAmountModule.AdjustSupplierAmount", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account", "Account")
                        .WithMany("AdjustSupplierAmounts")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.SupplierModule.Supplier", "Supplier")
                        .WithMany("AdjustSupplierAmount")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancedReceivedModule.AdvanceReceived", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account", "Account")
                        .WithMany("AdvanceReceiveds")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.CustomerModule.Customer", "Customer")
                        .WithMany("AdvanceReceiveds")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancedReceivedModule.AdvanceReceivedItem", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AdvancedReceivedModule.AdvanceReceived", "AdvanceReceived")
                        .WithMany("AdvanceReceivedItems")
                        .HasForeignKey("AdvanceReceivedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancePaidModule.AdvancePaid", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account", "Account")
                        .WithMany("AdvancePaids")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.SupplierModule.Supplier", "Supplier")
                        .WithMany("AdvancePaids")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.AdvancePaidModule.AdvancePaidItem", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AdvancePaidModule.AdvancePaid", "AdvancePaid")
                        .WithMany("AdvancePaidItems")
                        .HasForeignKey("AdvancePaidId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.CustomerModule.Customer", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany("Customers")
                        .HasForeignKey("AccountingUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ExportInvoiceModule.ExportInvoice", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ExportInvoiceModule.ExportInvoiceItem", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.ExportInvoiceModule.ExportInvoice", "ExportInvoice")
                        .WithMany("ExportInvoiceItems")
                        .HasForeignKey("ExportInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.InventoryModule.Inventory", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany("Inventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.IssueNoteModule.IssueNote", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account")
                        .WithMany("IssueNotes")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.CustomerModule.Customer", "Customer")
                        .WithMany("IssueNotes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.IssueNoteModule.IssueNoteItem", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.IssueNoteModule.IssueNote", "IssueNote")
                        .WithMany("IssueNoteItems")
                        .HasForeignKey("IssueNoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany("IssueNoteItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ProductModule.Product", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany("Products")
                        .HasForeignKey("AccountingUnitId");
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.PurchaseInvoiceModule.PurchaseInvoice", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account", "Account")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.SupplierModule.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.PurchaseInvoiceModule.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BiharEnergy.Core.Domain.PurchaseInvoiceModule.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ReceiptNoteModule.ReceiptNote", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account", "Account")
                        .WithMany("ReceiptNotes")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.SupplierModule.Supplier", "Supplier")
                        .WithMany("ReceiptNotes")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.ReceiptNoteModule.ReceiptNoteItem", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany("ReceiptNoteItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BiharEnergy.Core.Domain.ReceiptNoteModule.ReceiptNote", "ReceiptNote")
                        .WithMany("ReceiptNoteItems")
                        .HasForeignKey("ReceiptNoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.SalesInvoiceModule.SalesInvoice", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.AccountModule.Account")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("AccountId");

                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany("B2CSalesInvoices")
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("BiharEnergy.Core.Domain.CustomerModule.Customer", "Customer")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.SalesInvoiceModule.SalesInvoiceItem", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.ProductModule.Product", "Product")
                        .WithMany("SalesInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BiharEnergy.Core.Domain.SalesInvoiceModule.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoiceItems")
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiharEnergy.Core.Domain.SupplierModule.Supplier", b =>
                {
                    b.HasOne("BiharEnergy.Core.Domain.Accounting.AccountingUnit", "AccountingUnit")
                        .WithMany("Suppliers")
                        .HasForeignKey("AccountingUnitId");
                });
#pragma warning restore 612, 618
        }
    }
}
